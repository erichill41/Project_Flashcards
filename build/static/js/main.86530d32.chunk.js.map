{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/Button.js","Layout/Home.js","Layout/CreateDeck.js","Layout/Deck.js","Layout/Card.js","Layout/StudyDeck.js","Layout/EditDeck.js","Layout/CreateCard.js","Layout/EditCard.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","updatedCard","cardId","append","Button","children","onClick","type","Home","useState","deckList","setDeckList","history","useHistory","useEffect","log","loadDecks","to","map","length","description","window","confirm","go","CreateDeck","formData","setFormData","handleChange","target","value","event","preventDefault","push","aria-label","class","aria-current","onSubmit","htmlFor","onChange","placeholder","rows","Deck","useParams","useRouteMatch","undefined","currentDeck","setCurrentDeck","currentCards","setCurrentCards","abortController","AbortController","deckToSet","loadCurrentDeck","abort","front","back","deleteCard","Card","cardCount","setCardCount","sideOfCard","setSideOfCard","studyCardCount","setStudyCardCount","studyCard","setStudyCard","sortedCards","sort","b","handleFlip","e","current","StudyDeck","params","loadDeck","EditDeck","setName","setDescription","updateDeck","then","required","CreateCard","setFront","setBack","createCard","EditCard","currentCard","setCurrentCard","find","loadInfo","updateCard","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86530d32.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\n\nexport const Button = ({ children, onClick, type }) => (\n        <button\n        type={ type ? { type }: \"button\"}\n        onClick={onClick}\n        className=\"btn btn-primary mb-2 mr-2 mt-2\"\n        >\n            {children}\n        </button>\n);\n\n\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api/index\";\n\nimport { Button } from \"./Button\";\n\nfunction Home() {\n    const [deckList, setDeckList] = useState([]);\n    const history = useHistory();\n\n    useEffect(() => {\n        async function loadDecks() {\n            try {\n                const response = await listDecks();\n                setDeckList(response);\n            } catch (error) {\n                console.log(error);\n            }\n        }\n\n        loadDecks();\n\n    }, []);\n\n    if (deckList) {\n        return (\n            <div>\n                <Link to=\"/decks/new\">\n                    <Button> Create Deck </Button>\n                </Link>\n                <br/>\n                    {deckList.map((deck) => (\n                        <div key={deck.id} className=\"card mb-3\">\n                            <div className=\"card-body\">\n                                <h4 className=\"card-title\"> {deck.name} </h4>\n                                    <h6 className=\"card-subtitle mb-2 text-muted\"> {deck.cards.length} cards </h6>\n                                    <p className=\"card-text\"> {deck.description} </p>\n                                    <Link to={`/decks/${deck.id}`}>\n                                        <Button> View </Button>\n                                    </Link>\n                                    <button className=\"btn btn-danger\" onClick={() => {\n                                        if(window.confirm(\"Delete this deck?\")) {\n                                            deleteDeck(`${deck.id}`);\n                                            history.go(\"/\");\n                                            }}}>\n                                        Delete\n                                    </button>\n                            </div>\n                        </div>\n                    ))}\n            </div>\n        )\n    } else {\n        return <p> Loading... </p>\n    }\n}\n\nexport default Home;","import React, { useState } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { createDeck } from \"../utils/api/index\";\n\n\nfunction CreateDeck() {\n    const initialFormData = {\n        name: \"\",\n        description: \"\",\n    };\n    const [formData, setFormData] = useState(initialFormData);\n    const history = useHistory();\n\n    const handleChange = ({ target }) => {\n        setFormData({\n            ...formData,\n            [target.name]: target.value,\n        });\n    };\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n        const { id } = await createDeck(formData);\n        history.push(`/decks/${id}`);\n    };\n\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol class=\"breadcrumb\">\n                    <li class=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\n                    <li class=\"breadcrumb-item active\" aria-current=\"page\">Create Deck</li>\n                </ol>\n            </nav>\n            <h2>Create New Deck</h2>\n            <form onSubmit={handleSubmit} className=\"form-group\">\n                <label className=\"col-form-label\" htmlFor=\"deckName\">\n                    Name\n                </label>\n                <input\n                id=\"deckName\"\n                type=\"text\"\n                name=\"name\"\n                onChange={handleChange}\n                className=\"form-control mb-3\"\n                value={formData.name}\n                placeholder=\"Name of Deck\"\n                />\n\n                <label htmlFor=\"deckDescription\">\n                    Description\n                </label>\n                <textarea\n                id=\"deckDescription\"\n                name=\"description\"\n                onChange={handleChange}\n                className=\"form-control mb-3\"\n                value={formData.description}\n                rows=\"4\"\n                placeholder=\"Description of deck contents\"\n                />\n                <button type=\"button\" onClick={() => history.push(\"/\")} className=\"btn btn-primary mr-2\">Cancel</button>\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            </form>\n        </div>\n    );\n}\n\nexport default CreateDeck;","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams, useHistory, useRouteMatch } from \"react-router-dom\";\nimport { readDeck, deleteCard, deleteDeck } from \"../utils/api/index\";\n\nimport { Button } from \"./Button\";\n\nfunction Deck() {\n    const { deckId } = useParams();\n    const history = useHistory();\n    const { url } = useRouteMatch();\n    const [ currentDeck, setCurrentDeck ] = useState(undefined);\n    const [currentCards, setCurrentCards] = useState(undefined);\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        async function loadCurrentDeck() {\n            try {\n                const deckToSet = await readDeck(deckId, abortController.signal);\n                setCurrentDeck(deckToSet);\n                const { cards } = deckToSet;\n                setCurrentCards(cards);\n            } catch (error) {\n                console.log(\"loadCurrentDeck Aborted\");\n            }\n        }\n        loadCurrentDeck();\n        return () => abortController.abort();\n    }, [deckId]);\n\n\n    if (currentDeck && currentCards) {\n        return (\n            <div>\n                <nav aria-label=\"breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">View Deck</li>\n                    </ol>\n                </nav>\n                <div> \n                    <h2> { currentDeck.name } </h2>\n                    <h4> { currentDeck.description } </h4>\n                    <Link to={`${url}/edit`}>\n                        <Button> Edit Deck </Button>\n                    </Link>\n                    <Link to={`${ url }/study`}>\n                        <Button> Study Deck </Button>\n                    </Link>\n                    <Link to={`${ url }/cards/new`}>\n                        <Button> Add Cards </Button>\n                    </Link>\n                    <button className=\"btn btn-danger\" onClick={() => {\n                        if(window.confirm(\"Delete this deck?\")) {\n                            deleteDeck(currentDeck.id);\n                            history.push(\"/\");\n                        }}}>\n                        Delete\n                    </button>\n                </div>\n\n                <div>\n                        {currentCards.map((card) => (\n                            <div key={card.id}>\n                                <div className=\"card border-primary mb-3\">\n                                    <div className=\"card-body\">\n                                        <h4 className=\"card-text text-danger\"> Front </h4>\n                                        <p className=\"card-text\"> {card.front} </p>\n                                <br/>\n                                    <h4 className=\"card-text text-danger\"> Back </h4>\n                                    <p className=\"card-text\"> {card.back} </p>\n\n                                    <Link to={`/decks/${currentDeck.id}/cards/${card.id}/edit`}>\n                                        <Button> Edit Card </Button>\n                                    </Link>\n                                    <button className=\"btn btn-danger\" onClick={() => {\n                                        if(window.confirm(\"Delete this card?\")) {\n                                            deleteCard(`${card.id}`);\n                                            history.push(`/decks/${deckId}`)\n                                        }}}> \n                                        Delete Card \n                                    </button>\n                                    </div>\n                                </div>\n                            \n                                \n                                \n                            </div>\n                        ))}\n                </div>\n            </div>\n        );\n    } else {\n        return <p> Loading... </p>\n    }\n}\n\nexport default Deck;","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nfunction Card({ currentCards }) {\n    const history = useHistory();\n    const deckId = useParams();\n\n    const [cardCount, setCardCount] = useState(1);\n    const [sideOfCard, setSideOfCard] = useState(null);\n    const [studyCardCount, setStudyCardCount] = useState(0);\n    const [studyCard, setStudyCard] = useState(null);\n    const sortedCards = currentCards.sort((a, b) => a.id - b.id);\n\n    useEffect(() => {\n        if(currentCards.length > 2){\n            setSideOfCard(true);\n        }\n        setStudyCard(sortedCards[studyCardCount])\n    }, [currentCards])\n    \n    const handleFlip = (event) => {\n        event.preventDefault()\n        setSideOfCard(!sideOfCard)\n    }\n\n\n    const handleNext = (e) => {\n        e.preventDefault()\n        setSideOfCard(!sideOfCard)\n        setCardCount((current) => current + 1)\n        setStudyCardCount((current) => current + 1)\n        setStudyCard(sortedCards[studyCardCount + 1])\n        if(currentCards.length <= cardCount){\n            if(window.confirm(\"Restart Cards?\")){\n                setCardCount(1);\n                setStudyCardCount(0);\n                setStudyCard(sortedCards[studyCardCount]);\n                history.push(`/decks/${deckId}/study`)\n            } else {history.push(\"/\")}\n        }\n    }\n\n    const handleAddCards = (event) => {\n        event.preventDefault()\n        history.push(`/decks/${deckId}/cards/new`)\n    }\n\n    if (currentCards) {\n        if ((sideOfCard === true) && studyCard){ \n            return (\n                <div className=\"card border-primary mb-3\">\n                    <div className=\"card-body\">\n                        <h4 className=\"card-title\"> Card {cardCount} of {currentCards.length}</h4>\n                        <p className=\"card-text\"> {studyCard.front} </p>\n                        <br />\n                        <button onClick={handleFlip} className=\"btn btn-primary\">Flip</button>\n                    </div>\n                </div>\n            )\n        }\n        if ((sideOfCard === false) && studyCard){\n            return (\n                <div className=\"card border-primary mb-3\">\n                    <div className=\"card-body\">\n                        <h4 className=\"card-title\">Card {cardCount} of {currentCards.length}</h4>\n                        <p className=\"card-text\"> {studyCard.back} </p>\n                        <br />\n                        <button onClick={handleFlip} className=\"btn btn-primary mr-3\">Flip</button>\n                        <button onClick={handleNext} className=\"btn btn-primary mr-3\">Next</button> \n                    </div> \n                </div>\n            );\n        }\n        else {\n            return (\n                <div className=\"card border-primary\">\n                    <div className=\"card-body mb-3\">\n                        <h4 className=\"card-title\">Not enough cards.</h4>\n                        <p className=\"card-text mb-3\">You need at least 3 cards to study. There are {currentCards.length} in this deck.</p>\n                        \n                    </div>\n                    <button onClick={handleAddCards} className=\"btn btn-primary\"> + Add Cards </button>\n                </div>\n            )\n        }\n    }\n    return (\n        <p>Loading...</p>\n    )\n}\nexport default Card;\n\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useParams, Link} from \"react-router-dom\";\nimport { readDeck } from \"../utils/api\";\nimport Card from \"./Card\";\n\nfunction StudyDeck() {\n    const params = useParams();\n    const [currentDeck, setCurrentDeck] = useState(null)\n    const [currentCards, setCurrentCards] = useState(null);\n\n    useEffect(() => {\n        async function loadDeck() {\n            setCurrentDeck([]);\n            setCurrentCards([]);\n            try {\n                const response = await readDeck(params.deckId);\n                setCurrentDeck(response);\n                const { cards } = response;\n                setCurrentCards(cards);\n            } catch (error) {console.log(error)}\n        }\n        loadDeck()\n    }, [params])\n\n    \n    if(currentDeck){\n        return (\n            <div>\n                <div>\n                    <nav aria-label=\"breadcrumb\">\n                        <ol class=\"breadcrumb\">\n                            <li class=\"breadcrumb-item\"><Link to=\"/\"> Home </Link></li>\n                            <li class=\"breadcrumb-item\"><Link to={`/decks/${currentDeck.id}`}> View Deck </Link></li>\n                            <li class=\"breadcrumb-item active\" aria-current=\"page\"> Study Deck </li>\n                        </ol>\n                    </nav>\n                </div>\n                <div>\n                    <h1>{currentDeck.name}: Study</h1>\n                </div>\n                    <Card currentCards={currentCards} />\n            </div>\n        )\n    \n    }\n    return (\n        <p>Loading...</p>\n    );\n}\nexport default StudyDeck;\n\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { readDeck } from \"../utils/api/index\";\n\n// import Card from \"./Card\";\n\n// function StudyDeck(){\n//     const { deckId } = useParams();\n//     const [currentDeck, setCurrentDeck] = useState(undefined);\n//     const [currentCards, setCurrentCards] = useState(null);\n\n//     useEffect(() => {\n//         async function loadCurrentDeck() {\n//             setCurrentDeck([]);\n//             setCurrentCards([]);\n//             try {\n//                 const response = await readDeck(deckId);\n//                 setCurrentDeck(response);\n//                 const { cards } = response;\n//                 setCurrentCards(cards);\n//             } catch (error) {\n//                 console.log(error);\n//             }\n//         }\n//         loadCurrentDeck();\n//     }, [deckId]);\n\n//     if (currentDeck) {\n//         return (\n//         <div>\n            // <nav aria-label=\"breadcrumb\">\n            //     <ol class=\"breadcrumb\">\n            //         <li class=\"breadcrumb-item\"><Link to=\"/\"> Home </Link></li>\n            //         <li class=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}> View Deck </Link></li>\n            //         <li class=\"breadcrumb-item active\" aria-current=\"page\"> Study Deck </li>\n            //     </ol>\n            // </nav>\n//             <h2> {currentDeck.name} </h2>\n//             <Card currentCards={currentCards} />\n//         </div>\n//         );\n//     } else {\n//         return <p> Loading... </p>\n//     }\n// }\n\n// export default StudyDeck;","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { updateDeck, readDeck } from \"../utils/api\";\n\nfunction EditDeck() {    \n    const {deckId} = useParams();\n    const history = useHistory();\n\n    const [currentDeck, setCurrentDeck] = useState(null)\n    const [name, setName] = useState(\"Loading...\")\n    const [description, setDescription] = useState(\"Loading...\")\n\n    useEffect(() => {\n        async function loadDeck() {\n            setCurrentDeck([]);\n            try {\n                const response = await readDeck(deckId);\n                setCurrentDeck(response);\n                setName(response.name);\n                setDescription(response.description);\n            } catch (error) {console.log(error)}\n        }\n        loadDeck()\n    }, [deckId])\n\n    const handleEditSubmit = (event) => {\n        event.preventDefault();\n        const deck = {\n            ...currentDeck,\n            name, \n            description\n        }\n        updateDeck(deck)\n        .then(response => {\n            console.log(response)\n            setCurrentDeck(response)\n            history.push(`/decks/${currentDeck.id}`)\n        })\n    }\n\n    const handleCancel = (event) => {\n        event.preventDefault();\n        history.push(`/decks/${currentDeck.id}`)\n    }\n\n    if(currentDeck){\n        return (\n            <div>\n                <nav aria-label=\"breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\n                        <li class=\"breadcrumb-item active\"><Link to={`/decks/${deckId}`}> View Deck </Link></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\"> Edit Deck </li>\n                    </ol>\n                </nav>\n                <h2>Edit Deck</h2>\n                <form onSubmit={handleEditSubmit}>\n                    <label>Name</label>\n                    <br />\n                        <input \n                        type=\"text\"\n                        required\n                        onChange={(event) => setName(event.target.value)}\n                        value={name}\n                        />\n                    <br />\n                    <label>Description</label>\n                    <br />\n                        <textarea\n                        required\n                        onChange={(event) => setDescription(event.target.value)}\n                        value={description}\n                        />\n                    <br />\n                    <button onClick={handleCancel}>Cancel</button>\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n    return <p>Loading...</p>\n   \n}\nexport default EditDeck;","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { createCard, readDeck } from \"../utils/api\";\n\nfunction CreateCard() {\n    const params = useParams();\n    const history = useHistory();\n\n    const [front, setFront] = useState(\"Front side of card\")\n    const [back, setBack] = useState(\"Back side of card\")\n    const [currentDeck, setCurrentDeck] = useState(null)\n    \n    useEffect(() => {\n        async function loadDeck() {\n            setCurrentDeck([])\n            try {\n                const response = await readDeck(params.deckId)\n                setCurrentDeck(response)\n            } catch (error) {console.log(error)}\n        }\n        loadDeck();\n    }, [params])\n\n    const handleDone = (e) => {\n        e.preventDefault();\n        history.push(`/decks/${params.deckId}`)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const card = {\n            front: front,\n            back: back,\n            deckId: params.deckId\n        }\n        createCard(params.deckId, card)\n        .then(response => {\n            console.log(response)\n            setFront(\"Front side of card\")\n            setBack(\"Back side of card\")\n        })\n        history.push(`/decks/${currentDeck.id}`)\n    }\n\n    if(currentDeck){\n        return (\n            <div>\n                <div>\n                    <nav aria-label=\"breadcrumb\">\n                        <ol class=\"breadcrumb\">\n                            <li class=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\n                            <li class=\"breadcrumb-item\"><Link to={`/decks/${currentDeck.id}`}> View Deck </Link></li>\n                            <li class=\"breadcrumb-item active\" aria-current=\"page\"> Create Card </li>\n                        </ol>\n                    </nav>\n                </div>\n                <div>\n                    <h2>{currentDeck.name}: Add Card</h2>\n                </div>\n                <form onSubmit={handleSubmit} className=\"form-group\">\n                    <label htmlFor=\"front\">Front</label>\n                    <textarea\n                    className=\"form-control\"\n                    rows=\"3\"\n                    required\n                    value={front}\n                    onChange={(e) => setFront(e.target.value)}\n                    />\n                    <br />\n                    <label>Back</label>\n                    <textarea\n                    className=\"form-control\"\n                    rows=\"3\"\n                    required\n                    value={back}\n                    onChange={(e) => setBack(e.target.value)}\n    \n                    />\n                    <br />\n                    <button onClick={handleDone} className=\"btn btn-primary mr-2\"> Done </button>\n                    <button type=\"submit\" className=\"btn btn-primary\"> Save </button>\n                </form>\n            </div>\n        )\n    }\n    return <p>Loading...</p>\n}\nexport default CreateCard;\n\n// import React, { useEffect, useState } from \"react\";\n// import { Link, useParams, useHistory } from \"react-router-dom\";\n// import { createCard, readDeck } from \"../utils/api/index\";\n\n// // Creates new card and sends to API\n// // Shows on /decks/deckId/cards/new route \n\n// function CreateCard() {\n//     const { deckId } = useParams();\n//     const history = useHistory();\n//     const [currentDeck, setCurrentDeck] = useState(undefined);\n//     const [cardData, setCardData] = useState({});\n    \n\n//     useEffect(() => {\n//         async function loadCurrentDeck() {\n//             try {\n//                 const response = await readDeck(deckId);\n//                 setCurrentDeck(response);\n//             } catch (error) {\n//                 console.log(error);\n//             }\n//         }\n//         loadCurrentDeck();\n//     }, [deckId]);\n\n//     const finishedHandler = (event) => {\n//         event.preventDefault();\n//         history.push(`/decks/${deckId}`);\n//     };\n\n//     const submitHandler = (event) => {\n//         event.preventDefault();\n//         const card = {\n//             deckId,\n//             front: \"\",\n//             back: \"\",\n//         }\n//         createCard(deckId, card)\n//         .then(response => {\n//             setCardData.front(\"\");\n//             setCardData.back(\"\");\n//         })\n//     }\n\n//     if (currentDeck) {\n//         return (\n//             <div>\n//                 <div>\n                    // <nav aria-label=\"breadcrumb\">\n                    //     <ol class=\"breadcrumb\">\n                    //         <li class=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\n                    //         <li class=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}> View Deck </Link></li>\n                    //         <li class=\"breadcrumb-item active\" aria-current=\"page\"> Create Card </li>\n                    //     </ol>\n                    // </nav>\n//                 </div>\n//                 <div>\n//                     <h2> {currentDeck.name}: Add Card </h2>\n//                 </div>\n//                 <form onSubmit={submitHandler}>\n//                     <label> Front </label>\n//                     <textarea \n//                         value={cardData.front}\n//                         onChange={(event) => setCardData.front(event.target.value)}\n//                     />\n//                     <br />\n//                     <label> Back </label>\n//                     <textarea\n//                         value={cardData.back}\n//                         onChange={(event) => setCardData.back(event.target.value)}\n//                     />\n\n//                     <button onClick={finishedHandler}> Finished </button>\n//                     <button onClick={submitHandler}> Submit </button>\n//                 </form>\n//             </div>\n//         );\n//     } else {\n//         return <p> Loading... </p>\n//     }\n// }\n\n// export default CreateCard;","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { readDeck, updateCard } from \"../utils/api\";\n\nfunction EditCard() {\n    const history = useHistory();\n    const { deckId, cardId } = useParams();\n    \n    const [front, setFront] = useState(\"\")\n    const [back, setBack] = useState(\"\")\n    const [currentDeck, setCurrentDeck] = useState(null)\n    const [currentCard, setCurrentCard] = useState(null)\n\n    useEffect(() => {\n        async function loadInfo(){\n            try {\n                const response = await readDeck(deckId);\n                setCurrentDeck(response)\n                setCurrentCard(response.cards.find((card) => (card.id + \"\") === cardId))\n                setFront((response.cards.find((card) => (card.id + \"\") === cardId)).front)\n                setBack((response.cards.find((card) => (card.id + \"\") === cardId)).back)\n            } catch (error) {console.log(error)}\n        }\n        loadInfo()\n    }, [deckId, cardId])\n\n    const handleCancel = (event) => {\n        event.preventDefault();\n        history.push(`/decks/${deckId}`)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const card = {\n            ...currentCard,\n            front, \n            back\n        }\n        updateCard(card)\n        .then(response => {\n            console.log(response);\n            setCurrentCard(response)\n            history.push(`/decks/${deckId}`)\n        })\n    }\n\n    if(currentDeck && currentCard){\n        return (\n            <div>\n                <div>\n                    <nav aria-label=\"breadcrumb\">\n                        <ol class=\"breadcrumb\">\n                            <li class=\"breadcrumb-item\"><Link to=\"/\"> Home </Link></li>\n                            <li class=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}> View Deck </Link></li>\n                            <li class=\"breadcrumb-item active\" aria-current=\"page\"> Edit Card </li>\n                        </ol>\n                    </nav>\n                </div>\n                <h2>Edit Card</h2>\n                <form onSubmit={handleSubmit} className=\"form-group\">\n                    <label htmlFor=\"front\">Front</label>\n                    <br />\n                    <textarea\n                    className=\"form-control\"\n                    rows= \"3\"\n                    required\n                    value={front}\n                    onChange={(event) => setFront(event.target.value)}\n                    />\n                    <br />\n                    <label htmlFor=\"back\">Back</label>\n                    <br />\n                    <textarea\n                    className=\"form-control\"\n                    rows= \"3\"\n                    required\n                    value={back}\n                    onChange={(event) => setBack(event.target.value)}\n                    />\n                    <br />\n                    <button onClick={handleCancel} className=\"btn btn-secondary mr-2\">Cancel</button>\n                    <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n    return <p>Loading...</p>\n}\nexport default EditCard;","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport CreateDeck from \"./CreateDeck\";\nimport Deck from \"./Deck\";\nimport StudyDeck from \"./StudyDeck\";\nimport EditDeck from \"./EditDeck\";\nimport CreateCard from \"./CreateCard\";\nimport EditCard from \"./EditCard\";\n\n\nfunction Layout() {\n\n  return (\n    <div className=\"container\">\n      <Header />\n    <hr></hr>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        \n        <Route exact path=\"/decks/new\">\n          <CreateDeck />\n        </Route>\n\n        <Route exact path=\"/decks/:deckId\">\n          <Deck />\n        </Route>\n\n        <Route exact path=\"/decks/:deckId/study\">\n          <StudyDeck />\n        </Route>\n\n        <Route exact path=\"/decks/:deckId/edit\">\n          <EditDeck />\n        </Route>\n\n        <Route exact path=\"/decks/:deckId/cards/new\">\n          <CreateCard />\n        </Route>\n\n        <Route exact path=\"/decks/:deckId/cards/:cardId/edit\">\n          <EditCard />\n        </Route>\n\n        <Route>\n          <NotFound />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout/index\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}