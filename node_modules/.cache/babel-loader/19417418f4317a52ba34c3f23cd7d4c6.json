{"ast":null,"code":"var _jsxFileName = \"/Users/erichill/Documents/Thinkful/Project_Flashcards_Qualified_1/src/Layout/DeckList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { Button, DeleteButton } from \"./Buttons\";\nimport { deleteDeck, listDecks } from \"../utils/api/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckList({\n  loading,\n  setLoading\n}) {\n  _s();\n\n  const history = useHistory();\n  const [decks, setDecks] = useState([]);\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function loadDecks() {\n      try {\n        const deckContent = await listDecks(abortController.signal);\n        setDecks(deckContent);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"loadDecks Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    loadDecks();\n    setLoading(false);\n    return () => abortController.abort();\n  }, [loading, setLoading]);\n\n  async function deleteHandler({\n    target\n  }) {\n    const id = target.id;\n    const abortController = new AbortController();\n\n    if (window.confirm(\"Delete this deck?\\n\\nYou wil not be able to recover it.\")) {\n      try {\n        await deleteDeck(id, abortController.signal);\n        setLoading(true);\n        setLoading(false);\n        history.push(\"/\");\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"ViewDeck Delete Aborted\");\n        } else {\n          console.log(error);\n        }\n      }\n\n      return () => abortController.abort();\n    }\n  }\n\n  const renderPage = decks.map(({\n    id,\n    name,\n    description,\n    cards\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"card-title text-danger\",\n          children: [\" \", name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"card-subtitle mb-2 text-muted\",\n          children: [\" \", cards.length, \" cards \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: [\" \", description, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/decks/${id}`,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            children: \" View \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n          onClick: deleteHandler,\n          id: id,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  });\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Loading List of Decks \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", renderPage, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(DeckList, \"nVZ+uN85oziZ7WQcZF1a5kYvNCA=\", false, function () {\n  return [useHistory];\n});\n\n_c = DeckList;\nexport default DeckList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckList\");","map":{"version":3,"sources":["/Users/erichill/Documents/Thinkful/Project_Flashcards_Qualified_1/src/Layout/DeckList.js"],"names":["React","useEffect","useState","Link","useHistory","useParams","Button","DeleteButton","deleteDeck","listDecks","DeckList","loading","setLoading","history","decks","setDecks","abortController","AbortController","loadDecks","deckContent","signal","error","name","console","log","abort","deleteHandler","target","id","window","confirm","push","renderPage","map","description","cards","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { Button, DeleteButton } from \"./Buttons\";\nimport { deleteDeck, listDecks } from \"../utils/api/index\";\n\nfunction DeckList ({ loading, setLoading }) {\n    const history = useHistory();\n    const [decks, setDecks] = useState([]);\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        async function loadDecks() {\n            try {\n                const deckContent = await listDecks(abortController.signal);\n                setDecks(deckContent);\n            } catch (error) {\n                if (error.name === \"AbortError\") {\n                    console.log(\"loadDecks Aborted\");\n                } else {\n                    throw error;\n                }\n            }\n        }\n        loadDecks();\n        setLoading(false);\n        return () => abortController.abort();\n    }, [loading, setLoading]);\n\n    \n    async function deleteHandler({ target }) {\n        const id = target.id;\n        const abortController = new AbortController();\n        if (\n            window.confirm(\"Delete this deck?\\n\\nYou wil not be able to recover it.\")\n        ) {\n            try {\n                await deleteDeck(id, abortController.signal);\n                setLoading(true);\n                setLoading(false);\n                history.push(\"/\");\n            } catch (error) {\n                if (error.name === \"AbortError\") {\n                    console.log(\"ViewDeck Delete Aborted\")\n                } else {\n                    console.log(error);\n                }\n            }\n            return () => abortController.abort();\n        }\n    }\n\n    const renderPage = decks.map(({ id, name, description, cards }) => {\n        return (\n            <div key={id} className=\"card mb-3\">\n                <div className=\"card-body\">\n                    <h4 className=\"card-title text-danger\"> {name} </h4>\n                    <h6 className=\"card-subtitle mb-2 text-muted\"> {cards.length} cards </h6>\n                    <p className=\"card-text\"> {description} </p>\n                    <br />\n                    <Link to={`/decks/${id}`}>\n                        <Button> View </Button>\n                    </Link>\n                    <DeleteButton onClick={deleteHandler} id={id}>\n                        Delete\n                    </DeleteButton>\n                </div>\n            </div>\n    );\n});\nif (loading) {\n    return <p> Loading List of Decks </p>\n} else {\n    return <div> {renderPage} </div>\n    }\n}\n\nexport default DeckList;"]},"metadata":{},"sourceType":"module"}